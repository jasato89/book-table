{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar Facebook =\n/** @class */\nfunction (_super) {\n  __extends(Facebook, _super);\n\n  function Facebook() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.EVENTS = {\n      EVENT_NAME_ACTIVATED_APP: 'fb_mobile_activate_app',\n      EVENT_NAME_DEACTIVATED_APP: 'fb_mobile_deactivate_app',\n      EVENT_NAME_SESSION_INTERRUPTIONS: 'fb_mobile_app_interruptions',\n      EVENT_NAME_TIME_BETWEEN_SESSIONS: 'fb_mobile_time_between_sessions',\n      EVENT_NAME_COMPLETED_REGISTRATION: 'fb_mobile_complete_registration',\n      EVENT_NAME_VIEWED_CONTENT: 'fb_mobile_content_view',\n      EVENT_NAME_SEARCHED: 'fb_mobile_search',\n      EVENT_NAME_RATED: 'fb_mobile_rate',\n      EVENT_NAME_COMPLETED_TUTORIAL: 'fb_mobile_tutorial_completion',\n      EVENT_NAME_PUSH_TOKEN_OBTAINED: 'fb_mobile_obtain_push_token',\n      EVENT_NAME_ADDED_TO_CART: 'fb_mobile_add_to_cart',\n      EVENT_NAME_ADDED_TO_WISHLIST: 'fb_mobile_add_to_wishlist',\n      EVENT_NAME_INITIATED_CHECKOUT: 'fb_mobile_initiated_checkout',\n      EVENT_NAME_ADDED_PAYMENT_INFO: 'fb_mobile_add_payment_info',\n      EVENT_NAME_PURCHASED: 'fb_mobile_purchase',\n      EVENT_NAME_ACHIEVED_LEVEL: 'fb_mobile_level_achieved',\n      EVENT_NAME_UNLOCKED_ACHIEVEMENT: 'fb_mobile_achievement_unlocked',\n      EVENT_NAME_SPENT_CREDITS: 'fb_mobile_spent_credits',\n      EVENT_PARAM_CURRENCY: 'fb_currency',\n      EVENT_PARAM_REGISTRATION_METHOD: 'fb_registration_method',\n      EVENT_PARAM_CONTENT_TYPE: 'fb_content_type',\n      EVENT_PARAM_CONTENT_ID: 'fb_content_id',\n      EVENT_PARAM_SEARCH_STRING: 'fb_search_string',\n      EVENT_PARAM_SUCCESS: 'fb_success',\n      EVENT_PARAM_MAX_RATING_VALUE: 'fb_max_rating_value',\n      EVENT_PARAM_PAYMENT_INFO_AVAILABLE: 'fb_payment_info_available',\n      EVENT_PARAM_NUM_ITEMS: 'fb_num_items',\n      EVENT_PARAM_LEVEL: 'fb_level',\n      EVENT_PARAM_DESCRIPTION: 'fb_description',\n      EVENT_PARAM_SOURCE_APPLICATION: 'fb_mobile_launch_source',\n      EVENT_PARAM_VALUE_YES: '1',\n      EVENT_PARAM_VALUE_NO: '0'\n    };\n    return _this;\n  }\n\n  Facebook.prototype.getApplicationId = function () {\n    return cordova(this, \"getApplicationId\", {}, arguments);\n  };\n\n  Facebook.prototype.setApplicationId = function (id) {\n    return cordova(this, \"setApplicationId\", {}, arguments);\n  };\n\n  Facebook.prototype.getApplicationName = function () {\n    return cordova(this, \"getApplicationName\", {}, arguments);\n  };\n\n  Facebook.prototype.setApplicationName = function (name) {\n    return cordova(this, \"setApplicationName\", {}, arguments);\n  };\n\n  Facebook.prototype.login = function (permissions) {\n    return cordova(this, \"login\", {}, arguments);\n  };\n\n  Facebook.prototype.loginWithLimitedTracking = function (permissions) {\n    return cordova(this, \"loginWithLimitedTracking\", {}, arguments);\n  };\n\n  Facebook.prototype.checkHasCorrectPermissions = function (permissions) {\n    return cordova(this, \"checkHasCorrectPermissions\", {}, arguments);\n  };\n\n  Facebook.prototype.isDataAccessExpired = function () {\n    return cordova(this, \"isDataAccessExpired\", {}, arguments);\n  };\n\n  Facebook.prototype.reauthorizeDataAccess = function () {\n    return cordova(this, \"reauthorizeDataAccess\", {}, arguments);\n  };\n\n  Facebook.prototype.logout = function () {\n    return cordova(this, \"logout\", {}, arguments);\n  };\n\n  Facebook.prototype.getLoginStatus = function () {\n    return cordova(this, \"getLoginStatus\", {}, arguments);\n  };\n\n  Facebook.prototype.getAccessToken = function () {\n    return cordova(this, \"getAccessToken\", {}, arguments);\n  };\n\n  Facebook.prototype.getCurrentProfile = function () {\n    return cordova(this, \"getCurrentProfile\", {}, arguments);\n  };\n\n  Facebook.prototype.showDialog = function (options) {\n    return cordova(this, \"showDialog\", {}, arguments);\n  };\n\n  Facebook.prototype.api = function (requestPath, permissions, httpMethod) {\n    return cordova(this, \"api\", {}, arguments);\n  };\n\n  Facebook.prototype.logEvent = function (name, params, valueToSum) {\n    return cordova(this, \"logEvent\", {\n      \"successIndex\": 3,\n      \"errorIndex\": 4\n    }, arguments);\n  };\n\n  Facebook.prototype.setAutoLogAppEventsEnabled = function (enabled) {\n    return cordova(this, \"setAutoLogAppEventsEnabled\", {\n      \"successIndex\": 1,\n      \"errorIndex\": 2\n    }, arguments);\n  };\n\n  Facebook.prototype.setAdvertiserIDCollectionEnabled = function (enabled) {\n    return cordova(this, \"setAdvertiserIDCollectionEnabled\", {}, arguments);\n  };\n\n  Facebook.prototype.setAdvertiserTrackingEnabled = function (enabled) {\n    return cordova(this, \"setAdvertiserTrackingEnabled\", {}, arguments);\n  };\n\n  Facebook.prototype.logPurchase = function (value, currency, params) {\n    return cordova(this, \"logPurchase\", {}, arguments);\n  };\n\n  Facebook.prototype.getDeferredApplink = function () {\n    return cordova(this, \"getDeferredApplink\", {}, arguments);\n  };\n\n  Facebook.prototype.activateApp = function () {\n    return cordova(this, \"activateApp\", {}, arguments);\n  };\n\n  Facebook.pluginName = \"Facebook\";\n  Facebook.plugin = \"cordova-plugin-facebook-connect\";\n  Facebook.pluginRef = \"facebookConnectPlugin\";\n  Facebook.repo = \"https://github.com/cordova-plugin-facebook-connect/cordova-plugin-facebook-connect\";\n  Facebook.install = \"ionic cordova plugin add cordova-plugin-facebook-connect --variable APP_ID=\\\"123456789\\\" --variable APP_NAME=\\\"myApplication\\\"\";\n  Facebook.installVariables = [\"APP_ID\", \"APP_NAME\"];\n  Facebook.platforms = [\"Android\", \"iOS\", \"Browser\"];\n\n  Facebook.ɵfac = /*@__PURE__*/function () {\n    var ɵFacebook_BaseFactory;\n    return function Facebook_Factory(t) {\n      return (ɵFacebook_BaseFactory || (ɵFacebook_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Facebook)))(t || Facebook);\n    };\n  }();\n\n  Facebook.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Facebook,\n    factory: function (t) {\n      return Facebook.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Facebook;\n}(IonicNativePlugin);\n\nexport { Facebook }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}