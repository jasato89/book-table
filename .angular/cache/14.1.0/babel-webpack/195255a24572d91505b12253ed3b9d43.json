{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Capacitor } from \"@capacitor/core\";\nimport { ModalSearchBarComponent } from '../../components/modal-search-bar/modal-search-bar.component';\nlet Tab2Page = class Tab2Page {\n  constructor(modalController, geolocation, mapsAPILoader, loadingController, authService, toastService, route, router, locationService, navCtrl, platform, firebaseAnalytics) {\n    this.modalController = modalController;\n    this.geolocation = geolocation;\n    this.mapsAPILoader = mapsAPILoader;\n    this.loadingController = loadingController;\n    this.authService = authService;\n    this.toastService = toastService;\n    this.route = route;\n    this.router = router;\n    this.locationService = locationService;\n    this.navCtrl = navCtrl;\n    this.platform = platform;\n    this.firebaseAnalytics = firebaseAnalytics;\n    this.zoom = 15;\n    this.radius = 500;\n    this.radiusLat = 0;\n    this.radiusLong = 0;\n    this.postData = {\n      topic: '',\n      commensals: '',\n      city: '',\n      favorites: false,\n      bib_gourmand: false,\n      michelin: false,\n      id_user: ''\n    };\n  }\n\n  ngOnInit() {\n    this.commensals = 'any';\n  }\n\n  ionViewWillEnter() {\n    this.getRestaurants();\n    this.getCities();\n  }\n\n  ionViewDidEnter() {\n    this.mapsAPILoader.load().then(() => {\n      this.getMyLocation();\n\n      if (!this.platform.is('mobileweb')) {\n        this.firebaseAnalytics.logEvent('page_view', {\n          page: \"Search View\"\n        }).then(res => console.log(res)).catch(error => console.error(error));\n      }\n    });\n  }\n\n  ionViewDidLeave() {\n    this.coordLatitude = null;\n    this.coordLongitude = null;\n    this.avaibleMap = false;\n  }\n\n  openModal() {\n    this.presentModal();\n  }\n\n  segmentChanged(ev) {}\n\n  drawMap() {\n    this.agmMap.triggerResize();\n  }\n\n  getMyLocation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.platform.is('ios')) {\n        this.setCurrentLocation();\n      } else {\n        this.requestPermissionAndroid();\n      }\n    });\n  }\n\n  requestPermissionAndroid() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const hasPermission = yield this.locationService.checkGPSPermission();\n\n      if (hasPermission) {\n        if (Capacitor.isNative) {\n          const canUseGPS = yield this.locationService.askToTurnOnGPS();\n          this.postGPSPermission(canUseGPS);\n        } else {\n          this.postGPSPermission(true);\n        }\n      } else {\n        const permission = yield this.locationService.requestGPSPermission();\n\n        if (permission === 'CAN_REQUEST' || permission === 'GOT_PERMISSION') {\n          if (Capacitor.isNative) {\n            const canUseGPS = yield this.locationService.askToTurnOnGPS();\n            this.postGPSPermission(canUseGPS);\n          } else {\n            this.postGPSPermission(true);\n          }\n        }\n      }\n    });\n  }\n\n  postGPSPermission(canUseGPS) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (canUseGPS) {\n        this.watchPosition();\n      } else {\n        this.toastService.presentToast('Please turn on GPS to get location');\n      }\n    });\n  }\n\n  watchPosition() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.setCurrentLocation();\n      } catch (err) {}\n    });\n  }\n\n  setCurrentLocation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loading = yield this.loadingController.create({\n        message: 'Chargement...',\n        mode: 'ios'\n      });\n      yield loading.present();\n      this.geolocation.getCurrentPosition().then(resp => {\n        this.coordLatitude = resp.coords.latitude;\n        this.coordLongitude = resp.coords.longitude;\n        this.radiusLat = this.coordLatitude;\n        this.radiusLong = this.coordLongitude;\n        this.avaibleMap = true;\n\n        if (this.restaurants) {\n          this.showHideMarkers();\n        }\n\n        this.segment = 'proximity';\n        loading.dismiss();\n      }).catch(error => {\n        loading.dismiss();\n      });\n    });\n  }\n\n  clickedMarker(label, index) {}\n\n  getRestaurants() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.id_user = window.localStorage.getItem('id_user');\n      this.postData.id_user = this.id_user;\n      this.authService.getAllRestaurants(this.postData).subscribe(res => {\n        var maxLength = 100;\n        this.restaurants = res;\n        this.restaurants.forEach(element => {\n          element.images = JSON.parse(element.images);\n          element.isShown = false;\n          element.description_short = element.description.substring(0, maxLength) + '...';\n          element.restaurant_menu = JSON.parse(element.restaurant_menu); //console.log(element)\n\n          if (element.restaurant_menu[0]) {\n            element.restaurant_menu = element.restaurant_menu[0].download_link;\n          }\n        });\n        this.showHideMarkers();\n      }, error => {\n        this.toastService.presentToast('Problème de réseau.');\n      });\n    });\n  }\n\n  optionsFn(radiusGPS) {\n    this.radius = parseInt(radiusGPS);\n    if (this.radius == 500) this.onZoomChange(15);\n    if (this.radius == 1000) this.onZoomChange(14);\n    if (this.radius == 5000) this.onZoomChange(12);\n    if (this.radius == 10000) this.onZoomChange(11);\n    if (this.radius == 20000) this.onZoomChange(10);\n    if (this.radius == 50000) this.onZoomChange(9);\n    this.showHideMarkers();\n  }\n\n  onZoomChange(newZoomValue) {\n    this.zoom = newZoomValue;\n  }\n\n  showHideMarkers() {\n    this.restaurants.forEach(value => {\n      value.isShown = this.getDistanceBetween(value.coords[0].lat, value.coords[0].lng, this.radiusLat, this.radiusLong);\n    });\n  }\n\n  optionsCommensals(commensals) {\n    this.commensals = commensals;\n  }\n\n  optionsTopics(topics) {\n    this.topics = topics;\n  }\n\n  optionsCity(city) {\n    this.city = city;\n  }\n\n  tabChange(segment) {\n    if (segment == 'proximity') {} else {\n      this.coordLatitude = null;\n      this.coordLongitude = null;\n      this.avaibleMap = false;\n    }\n  }\n\n  refreshProximity() {\n    this.getMyLocation();\n  }\n\n  validateInputs() {\n    let commensals = this.commensals;\n    return this.commensals && commensals.length > 0;\n  }\n\n  viewRestaurant(m) {\n    let navigationExtras = {\n      state: {\n        item: m\n      }\n    };\n    this.router.navigate(['home/tabs/tabs2/restaurant-details'], navigationExtras);\n  }\n\n  profile() {\n    this.router.navigate(['home/tabs/user-profile']);\n  }\n\n  getDistanceBetween(lat1, long1, lat2, long2) {\n    var from = new google.maps.LatLng(lat1, long1);\n    var to = new google.maps.LatLng(lat2, long2);\n\n    if (google.maps.geometry.spherical.computeDistanceBetween(from, to) <= this.radius) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  SortArray(x, y) {\n    if (x.city < y.city) {\n      return -1;\n    }\n\n    if (x.city > y.city) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  getCities() {\n    this.authService.getCitysFromRestaurants().subscribe(res => {\n      this.cities = res; //console.log(this.cities.sort(this.SortArray))\n    }, error => {\n      this.toastService.presentToast('Problème de réseau.');\n    });\n  }\n\n  goToBooking(m) {\n    if (m.restaurant) {\n      m = m.restaurant;\n    }\n\n    let navigationExtras = {\n      state: {\n        item: m\n      }\n    };\n    this.router.navigate(['home/tabs/tabs2/restaurant-details/booking'], navigationExtras);\n  }\n\n  ordenar(a, b) {\n    return b.disponible - a.disponible;\n  }\n\n  searchAction() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.validateInputs()) {\n        const loading = yield this.loadingController.create({\n          message: 'Chargement...',\n          mode: 'ios'\n        });\n        yield loading.present(); // this.postData.commensals = this.commensals;\n\n        this.postData.topic = this.topics;\n        this.postData.city = this.city;\n        this.postData.id_user = window.localStorage.getItem('id_user');\n        console.log(this.postData);\n        this.authService.getBookings(this.postData).subscribe(res => {\n          var maxLength = 140;\n          this.restaurantsFilter = res.sort(this.ordenar);\n          console.log(this.restaurantsFilter);\n\n          if (this.restaurantsFilter) {\n            this.restaurantsFilter.forEach(element => {\n              element.images = JSON.parse(element.images);\n              element.description_short = element.description.substring(0, maxLength) + '...';\n              console.log(element);\n            });\n          } else {\n            this.toastService.presentToast(\"Il n'y a aucum restaurant correspondant à vos critères \");\n          }\n\n          loading.dismiss();\n        }, error => {\n          loading.dismiss();\n          this.restaurantsFilter = null;\n        });\n      } else {\n        this.toastService.presentToast('Remplissez les champs: \"Nombre de couverts\"');\n      }\n    });\n  }\n\n  presentModal() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const modal = yield this.modalController.create({\n        component: ModalSearchBarComponent,\n        cssClass: 'my-modal-component'\n      });\n      return yield modal.present();\n    });\n  }\n\n};\n\n__decorate([ViewChild('agmMap')], Tab2Page.prototype, \"agmMap\", void 0);\n\nTab2Page = __decorate([Component({\n  selector: 'app-tab2',\n  templateUrl: 'tab2.page.html',\n  styleUrls: ['tab2.page.scss']\n})], Tab2Page);\nexport { Tab2Page };","map":null,"metadata":{},"sourceType":"module"}