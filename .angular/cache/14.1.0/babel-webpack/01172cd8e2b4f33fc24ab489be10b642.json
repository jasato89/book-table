{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { AndroidPermissions } from '@ionic-native/android-permissions';\nimport { LocationAccuracy } from '@ionic-native/location-accuracy';\nimport { Capacitor } from \"@capacitor/core\";\nimport * as i0 from \"@angular/core\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor() {}\n\n    askToTurnOnGPS() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve, reject) => {\n          LocationAccuracy.canRequest().then(canRequest => {\n            if (canRequest) {\n              // the accuracy option will be ignored by iOS\n              LocationAccuracy.request(LocationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(() => {\n                resolve(true);\n              }, error => {\n                resolve(false);\n              });\n            } else {\n              resolve(false);\n            }\n          });\n        });\n      });\n    } // Check if application having GPS access permission\n\n\n    checkGPSPermission() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve, reject) => {\n          if (Capacitor.isNative) {\n            AndroidPermissions.checkPermission(AndroidPermissions.PERMISSION.ACCESS_FINE_LOCATION).then(result => {\n              if (result.hasPermission) {\n                // If having permission show 'Turn On GPS' dialogue\n                resolve(true);\n              } else {\n                // If not having permission ask for permission\n                resolve(false);\n              }\n            }, err => {\n              alert(err);\n            });\n          } else {\n            resolve(true);\n          }\n        });\n      });\n    }\n\n    requestGPSPermission() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve, reject) => {\n          LocationAccuracy.canRequest().then(canRequest => {\n            if (canRequest) {\n              resolve('CAN_REQUEST');\n            } else {\n              // Show 'GPS Permission Request' dialogue\n              AndroidPermissions.requestPermission(AndroidPermissions.PERMISSION.ACCESS_FINE_LOCATION).then(result => {\n                if (result.hasPermission) {\n                  // call method to turn on GPS\n                  resolve('GOT_PERMISSION');\n                } else {\n                  resolve('DENIED_PERMISSION');\n                }\n              }, error => {\n                // Show alert if user click on 'No Thanks'\n                alert('requestPermission Error requesting location permissions ' + error);\n              });\n            }\n          });\n        });\n      });\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)();\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}